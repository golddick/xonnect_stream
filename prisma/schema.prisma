datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = [ "fullTextIndex"]
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  email          String @db.Text
  bio            String? @db.Text
  instagram      String? @db.Text
  twitter        String? @db.Text
  youtube        String? @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream         Stream?     @relation("UserStream")
  streamId       String?     @unique

  payments Payment[]
  schedules   Schedule[]  @relation(name: "scheduledBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId           String        @unique
  user             User          @relation("UserStream", fields: [userId], references: [id], onDelete: Cascade)

  scheduleId       String?
  schedule         Schedule?     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payments          Payment[] @relation("StreamPayments")

  @@index([userId])
  @@index([ingressId])
  // @@fulltext([name])
}

model Payment {
  id         String            @id @default(uuid())
  externalUserId     String
  user       User              @relation(fields: [externalUserId], references: [externalUserId], onDelete: Cascade)
  email      String
  name       String
  amount     Float
  streamId   String?
  reference  String?            @unique
  stream     Stream?           @relation("StreamPayments", fields: [streamId], references: [id], onDelete: Cascade)
  scheduleId String?
  schedule   Schedule?         @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  status     SUBSCRIPTION_STATUS
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([externalUserId])
  @@index([scheduleId])
  @@index([streamId])
}



enum SUBSCRIPTION_STATUS {
  PENDING 
  SUCCESSFUL
}

model Schedule {
  id              String   @id @default(uuid())
  title           String  
  address         String
  description     String?  
  eventDateTime   DateTime
  amount          Float ?
  isFree          Boolean @default(false)
  thumbnailImage  String?  
  thumbnailVideo  String?
  artists         String?  
  organizers      String? 
  orgEmail        String  
  userId          String  
  user            User     @relation(name: "scheduledBy",  fields: [userId], references: [id], onDelete: Cascade)

  streamId        String  
  isLive          Boolean @default(false) 

  payments        Payment[]
  streams         Stream[]
  fileUploads     ScheduleFileUpload[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([streamId])
}

model ScheduleFileUpload {
  id              String   @id @default(uuid())
  scheduleId      String
  ImageURL        String
  schedule        Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([scheduleId])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower    User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

